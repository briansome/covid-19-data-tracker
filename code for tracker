import pandas as pd

# Define the path to the downloaded CSV file
file_path = 'owid-covid-data.csv'

# Load the dataset into a Pandas DataFrame
# Using a try-except block for robust file loading
try:
    df = pd.read_csv(file_path)
    print(f"Successfully loaded data from {file_path}")
except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found. Attempting to load from URL.")
    # Optionally, attempt to load from URL as a fallback
    url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv"
    try:
        df = pd.read_csv(url)
        print(f"Successfully loaded data from URL: {url}")
    except Exception as e:
        print(f"Error loading from URL: {e}. Please check your internet connection or URL.")
        df = pd.DataFrame() # Create an empty DataFrame to prevent further errors
except Exception as e:
    print(f"An unexpected error occurred during file loading: {e}")
    df = pd.DataFrame() # Create an empty DataFrame
print("\nFirst 5 rows of the DataFrame:")
print(df.head().to_markdown(index=False))

print("\nColumn names:")
print(df.columns.to_list())

print("\nDataFrame Info:")
df.info()
print("\nMissing values per column (raw counts):")
print(df.isnull().sum().to_markdown())
# Convert the 'date' column to datetime objects
df['date'] = pd.to_datetime(df['date'], errors='coerce')
# Display the data type after conversion to confirm
print("\n'date' column dtype after conversion:")
print(df['date'].dtype)
countries_of_interest = # Ensure exact country names from the dataset
df_filtered = df[df['location'].isin(countries_of_interest)].copy()
print(f"\nData filtered for countries: {countries_of_interest}")
print(f"Shape of filtered DataFrame: {df_filtered.shape}")
initial_rows = df_filtered.shape
df_filtered.dropna(subset=['date', 'location', 'total_cases', 'total_deaths'], inplace=True)
rows_after_drop = df_filtered.shape
print(f"\nDropped {initial_rows - rows_after_drop} rows with missing critical values.")
# Sort data by location and date for accurate time-series operations
df_filtered.sort_values(by=['location', 'date'], inplace=True)

# Fill 'new_cases' and 'new_deaths' with 0, assuming no reporting means no new events
numeric_cols_to_fill_zero = ['new_cases', 'new_deaths', 'new_cases_smoothed', 'new_deaths_smoothed']
for col in numeric_cols_to_fill_zero:
    if col in df_filtered.columns:
        df_filtered[col].fillna(0, inplace=True)

# For cumulative metrics like 'total_vaccinations', interpolation or ffill is more appropriate
# Apply interpolation within each country group
cumulative_cols_to_interpolate = ['total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated',
                                  'total_boosters', 'total_cases', 'total_deaths']
for col in cumulative_cols_to_interpolate:
    if col in df_filtered.columns:
        # Interpolate linearly for smoother trends
        df_filtered[col] = df_filtered.groupby('location')[col].transform(lambda x: x.interpolate(method='linear', limit_direction='forward'))
        # Then, forward fill any remaining NaNs (e.g., at the start of a series)
        df_filtered[col] = df_filtered.groupby('location')[col].transform(lambda x: x.fillna(method='ffill'))
        # Backward fill remaining NaNs (e.g., at the end of a series)
        df_filtered[col] = df_filtered.groupby('location')[col].transform(lambda x: x.fillna(method='bfill'))

# Check missing values again after cleaning
print("\nMissing values per column after cleaning:")
print(df_filtered.isnull().sum().to_markdown())
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_theme(style='whitegrid', palette='deep') # Set a professional plotting style and color palette

# Plot Cumulative COVID-19 Cases Over Time
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_filtered, x='date', y='total_cases', hue='location', marker='o', markersize=4, linewidth=2)
plt.title('Cumulative COVID-19 Cases Over Time by Country', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Cases', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(title='Country', title_fontsize='13', fontsize='10', loc='upper left')
plt.ticklabel_format(style='plain', axis='y') # Prevent scientific notation on y-axis for large numbers
plt.tight_layout()
plt.show()

# Plot Cumulative COVID-19 Deaths Over Time
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_filtered, x='date', y='total_deaths', hue='location', marker='o', markersize=4, linewidth=2)
plt.title('Cumulative COVID-19 Deaths Over Time by Country', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Deaths', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(title='Country', title_fontsize='13', fontsize='10', loc='upper left')
plt.ticklabel_format(style='plain', axis='y') # Prevent scientific notation on y-axis for large numbers
plt.tight_layout()
plt.show()
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_filtered, x='date', y='new_cases_smoothed', hue='location', linewidth=2)
plt.title('7-Day Smoothed Daily New COVID-19 Cases Over Time by Country', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Smoothed Daily New Cases', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(title='Country', title_fontsize='13', fontsize='10', loc='upper left')
plt.tight_layout()
plt.show()
# Calculate death rate, handling potential division by zero
df_filtered['death_rate'] = (df_filtered['total_deaths'] / df_filtered['total_cases']) * 100
df_filtered['death_rate'].replace([float('inf'), -float('inf')], pd.NA, inplace=True)
df_filtered['death_rate'].fillna(0, inplace=True) # Fill remaining NaNs with 0 (e.g., if total_cases was 0)
# Get the latest data point for each country for comparison
latest_data_for_countries = df_filtered.sort_values('date').groupby('location').last().reset_index()

# Select and display relevant columns for the table
metrics_comparison_table = latest_data_for_countries[['location', 'date', 'total_cases', 'total_deaths', 'total_vaccinations', 'death_rate']].copy()
print("\nKey Metrics Comparison (Latest Data):")
print(metrics_comparison_table.to_markdown(index=False))
# Plot Bar Chart for Latest Death Rate
plt.figure(figsize=(10, 6))
sns.barplot(data=latest_data_for_countries, x='location', y='death_rate', palette='viridis')
plt.title('COVID-19 Death Rate by Country (Latest Data)', fontsize=16)
plt.xlabel('Country', fontsize=12)
plt.ylabel('Death Rate (%)', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Display Death Rate by Country (Latest Data) table
death_rate_table = latest_data_for_countries[['location', 'death_rate']].sort_values(by='death_rate', ascending=False).copy()
print("\nDeath Rate by Country (Latest Data):")
print(death_rate_table.to_markdown(index=False))
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_filtered, x='date', y='total_vaccinations', hue='location', linewidth=2)
plt.title('Cumulative COVID-19 Vaccinations Over Time by Country', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Vaccinations', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(title='Country', title_fontsize='13', fontsize='10', loc='upper left')
plt.ticklabel_format(style='plain', axis='y') # Prevent scientific notation on y-axis for large numbers
plt.tight_layout()
plt.show()
# Assuming 'population' column is available and accurate for each location
# Prioritize 'people_vaccinated_per_hundred' if available, otherwise calculate
if 'people_vaccinated_per_hundred' in df_filtered.columns:
    df_filtered['vaccinated_percentage'] = df_filtered['people_vaccinated_per_hundred']
elif 'population' in df_filtered.columns:
    df_filtered['vaccinated_percentage'] = (df_filtered['people_vaccinated'] / df_filtered['population']) * 100
    # Handle potential NaNs or inf after division
    df_filtered['vaccinated_percentage'].replace([float('inf'), -float('inf')], pd.NA, inplace=True)
    df_filtered['vaccinated_percentage'].fillna(0, inplace=True) # Fill remaining NaNs with 0
else:
    print("Warning: 'population' or 'people_vaccinated_per_hundred' column not found for vaccination percentage calculation.")
    df_filtered['vaccinated_percentage'] = pd.NA # Assign NA if calculation not possible

print("\nVaccinated percentage column created.")
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_filtered, x='date', y='vaccinated_percentage', hue='location', linewidth=2)
plt.title('Percentage of Population with at least One COVID-19 Vaccine Dose Over Time', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Vaccinated Population (%)', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(title='Country', title_fontsize='13', fontsize='10', loc='upper left')
plt.tight_layout()
plt.show()
# Ensure data is sorted by date for correct 'last' or 'keep='last'' behavior
df_sorted_for_latest = df.sort_values(by=['location', 'date'], ascending=True)

# Get the last entry for each unique location
latest_global_data = df_sorted_for_latest.drop_duplicates(subset=['location'], keep='last').copy()

# Filter out aggregate locations (e.g., continents, income groups)
# These often have 'OWID_' prefix in iso_code or are not actual countries
latest_global_data = latest_global_data[~latest_global_data['iso_code'].str.startswith('OWID_')].copy()

print(f"\nPrepared data for global map. Number of countries: {latest_global_data.shape}")
import plotly.express as px

# Ensure 'total_cases_per_million' is not NaN for plotting, fill with 0 where appropriate
latest_global_data['total_cases_per_million'].fillna(0, inplace=True)

fig_cases = px.choropleth(latest_global_data,
                          locations="iso_code",
                          color="total_cases_per_million",
                          hover_name="location",
                          color_continuous_scale=px.colors.sequential.Plasma, # Or another suitable sequential scale
                          title='Global COVID-19 Total Cases per Million (Latest Data)',
                          projection="natural earth", # Or "equirectangular" for a more standard world map
                          labels={'total_cases_per_million': 'Cases per Million'})
fig_cases.update_layout(margin={"r":0,"t":40,"l":0,"b":0}) # Adjust margins for title
fig_cases.show()

# Ensure 'total_vaccinations_per_hundred' is not NaN for plotting, fill with 0 where appropriate
# Note: OWID dataset has 'total_vaccinations_per_hundred' or 'people_vaccinated_per_hundred'
# If not present, calculate 'vaccinated_percentage' as done in section 6
if 'people_vaccinated_per_hundred' in latest_global_data.columns:
    latest_global_data['vaccinated_percentage_for_map'] = latest_global_data['people_vaccinated_per_hundred']
elif 'population' in latest_global_data.columns and 'people_vaccinated' in latest_global_data.columns:
    latest_global_data['vaccinated_percentage_for_map'] = (latest_global_data['people_vaccinated'] / latest_global_data['population']) * 100
    latest_global_data['vaccinated_percentage_for_map'].replace([float('inf'), -float('inf')], pd.NA, inplace=True)
    latest_global_data['vaccinated_percentage_for_map'].fillna(0, inplace=True)
else:
    print("Warning: Cannot calculate vaccination percentage for map due to missing 'population' or 'people_vaccinated' data.")
    latest_global_data['vaccinated_percentage_for_map'] = 0 # Default to 0 if data is missing

fig_vaccinations = px.choropleth(latest_global_data,
                                 locations="iso_code",
                                 color="vaccinated_percentage_for_map",
                                 hover_name="location",
                                 color_continuous_scale=px.colors.sequential.Greens, # Or another suitable sequential scale
                                 title='Global COVID-19 Vaccinations per Hundred People (Latest Data)',
                                 projection="natural earth",
                                 labels={'vaccinated_percentage_for_map': 'Vaccinations per 100'})
fig_vaccinations.update_layout(margin={"r":0,"t":40,"l":0,"b":0})
fig_vaccinations.show()
